// <auto-generated />
using System;
using FileViewer.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileViewer.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.20");

            modelBuilder.Entity("FileViewer.Api.Models.DirectoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DirectoryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentDirectoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryItemId");

                    b.HasIndex("ParentDirectoryId");

                    b.HasIndex("Path");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("FileViewer.Api.Models.FileItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DirectoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DirectoryItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileContentBase64")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDirectory")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryItemId");

                    b.HasIndex("Path");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileViewer.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@fileviewer.com",
                            PasswordHash = "GR7mrJGQez9rgBazmSXGlokm4E0PnGHUDaf1aN1q5uc=",
                            Role = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FileViewer.Api.Models.DirectoryItem", b =>
                {
                    b.HasOne("FileViewer.Api.Models.DirectoryItem", null)
                        .WithMany("Subdirectories")
                        .HasForeignKey("DirectoryItemId");

                    b.HasOne("FileViewer.Api.Models.DirectoryItem", null)
                        .WithMany()
                        .HasForeignKey("ParentDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FileViewer.Api.Models.FileItem", b =>
                {
                    b.HasOne("FileViewer.Api.Models.DirectoryItem", null)
                        .WithMany("Files")
                        .HasForeignKey("DirectoryItemId");
                });

            modelBuilder.Entity("FileViewer.Api.Models.DirectoryItem", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Subdirectories");
                });
#pragma warning restore 612, 618
        }
    }
}
